// Experiment with moving pens randomly, and with flocking tendancies to those that come beforepackage{		public class WanderingValue extends Object	{		private var v:Number = 0;		private var maxV:Number = 100;		private var minV:Number = 0;		private var maxVelV:Number= 5;		private var minVelV:Number= -5;		private var velV:Number= 0;		private var accelV:Number= .3;		private var directionAccelV:Number		private var probChangeDirectionAccelV:Number= 0;		private var probIncrement:Number=.01;		private var l:String;		public function WanderingValue(s:String)		{				l=s;			if (Math.random()<.5) {				directionAccelV = 1;			}else {				directionAccelV = -1;			}		}				public function getValue():Number{						if (v>maxV-30 && directionAccelV==1) {				probChangeDirectionAccelV+=.5;				//trace("y too high, probChangeDirectionAccelY:"+probChangeDirectionAccelY);				if (Math.random()<probChangeDirectionAccelV) {					directionAccelV=-1;					probChangeDirectionAccelV = 0;				}			} else if (v<10 && directionAccelV==-1) {				//trace("y too low");				probChangeDirectionAccelV+=.5;				if (Math.random()<probChangeDirectionAccelV) {					directionAccelV=1;					probChangeDirectionAccelV = 0;				}			} else if (Math.random()<probChangeDirectionAccelV) {				//trace("y normal");				directionAccelV*=-1;				probChangeDirectionAccelV = 0;			} else {				probChangeDirectionAccelV += probIncrement;			}						velV+=(accelV*directionAccelV);			velV=Math.min(velV, maxVelV);			velV=Math.max(velV, minVelV);						v+=velV;						v=Math.min(v, maxV);			v=Math.max(v, minV);						//trace (l+":"+v+", velV:"+velV+", directionAccelV:"+directionAccelV)			return Math.round(v);		}	}}